var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/ApiController.html",[0,1.212,1,1.744]],["body/controllers/ApiController.html",[0,1.566,1,2.796,2,1.566,3,0.589,4,0.425,5,0.504,6,3.045,7,2.592,8,3.732,9,0.589,10,1.734,11,4.295,12,1.758,13,0.044,14,0.878,15,3.732,16,1.397,17,1.548,18,0.678,19,0.878,20,3.732,21,0.589,22,0.212,23,1.397,24,3.732,25,3.732,26,0.035,27,0.035]],["title/modules/AppModule.html",[28,1.212,29,1.744]],["body/modules/AppModule.html",[1,2.445,2,1.455,3,0.382,4,0.276,5,0.327,13,0.045,18,0.984,19,0.57,21,0.382,22,0.138,26,0.026,27,0.026,28,1.699,29,3.322,30,1.141,31,1.141,32,1.463,33,1.463,34,1.141,35,2.445,36,1.463,37,1.976,38,1.976,39,1.976,40,2.587,41,2.293,42,2.042,43,1.954,44,1.822,45,2.094,46,1.463,47,1.463,48,2.422,49,2.152,50,2.152,51,2.408,52,1.682,53,2.422,54,2.422,55,1.682,56,1.682,57,2.422,58,2.422,59,2.422,60,2.422,61,2.422,62,2.422,63,2.422,64,2.422,65,1.634,66,1.016,67,2.422,68,2.422,69,2.422,70,3.468,71,2.422,72,2.422,73,2.422]],["title/controllers/AuthController.html",[0,1.212,49,1.535]],["body/controllers/AuthController.html",[0,1.235,2,1.235,3,0.464,4,0.335,5,0.398,7,2.044,9,0.464,10,1.486,12,1.871,13,0.044,14,0.934,16,1.486,18,0.817,19,0.692,21,0.464,22,0.167,23,1.486,26,0.03,27,0.03,42,1.666,49,2.388,74,2.401,75,3.971,76,3.239,77,2.943,78,4.81,79,3.971,80,2.943,81,1.666,82,1.666,83,0.824,84,1.666,85,3.971,86,2.943,87,4.493,88,2.943,89,2.943,90,3.971,91,2.401,92,2.401,93,2.943,94,2.943,95,2.401,96,2.757,97,2.943,98,2.401,99,2.943,100,1.777,101,1.235,102,2.943,103,2.943,104,2.943,105,2.943,106,2.943,107,2.943,108,2.943,109,2.943]],["title/guards/AuthGuard.html",[110,2.006,111,1.744]],["body/guards/AuthGuard.html",[3,0.433,4,0.313,5,0.371,9,0.433,10,1.418,13,0.044,14,0.891,16,1.028,18,0.788,19,0.646,21,0.433,22,0.156,23,1.028,26,0.029,27,0.029,65,2.388,66,1.152,81,1.589,82,1.589,83,0.786,84,1.589,96,1.907,100,1.658,101,1.152,111,2.287,112,2.746,113,2.24,114,2.042,115,4.673,116,1.658,117,2.24,118,2.746,119,3.787,120,4.673,121,2.746,122,2.746,123,1.784,124,1.129,125,1.907,126,2.746,127,2.24,128,2.746,129,2.042,130,2.746,131,3.787,132,2.746,133,2.746,134,2.287,135,2.013,136,2.746,137,4.335,138,2.746,139,2.24,140,1.907,141,1.459,142,2.746,143,1.907,144,2.746,145,2.746,146,2.746,147,1.907,148,1.907,149,2.24]],["title/modules/AuthModule.html",[28,1.212,40,1.535]],["body/modules/AuthModule.html",[2,1.604,3,0.439,4,0.317,5,0.376,13,0.044,18,0.925,19,0.655,21,0.439,22,0.158,26,0.029,27,0.029,28,1.832,30,1.311,31,1.311,32,1.681,33,1.681,34,1.311,35,2.636,36,2.636,40,2.862,41,2.398,42,2.328,45,2.308,46,1.681,47,1.681,49,2.32,51,2.655,65,1.801,66,1.168,150,2.271,151,2.271,152,2.784,153,2.784,154,2.784,155,2.784,156,2.784,157,2.784,158,2.784,159,1.933,160,2.784,161,2.784,162,2.271,163,3.823,164,2.784,165,2.784,166,2.784,167,2.784,168,2.784,169,2.784]],["title/injectables/AuthService.html",[42,1.212,124,0.861]],["body/injectables/AuthService.html",[3,0.383,4,0.277,5,0.328,9,0.383,10,1.301,13,0.044,14,0.954,16,1.301,17,1.746,18,0.805,19,0.572,21,0.383,22,0.138,23,1.301,26,0.026,27,0.026,42,1.458,43,0.91,44,1.824,65,2.364,66,1.019,76,2.835,81,1.702,82,1.702,83,0.842,84,1.702,101,1.458,114,2.296,116,2.098,123,2.086,124,1.036,125,1.687,129,1.911,134,1.467,135,1.291,141,2.156,149,1.982,170,1.291,171,1.982,172,3.475,173,2.43,174,2.43,175,3.475,176,1.857,177,2.43,178,1.458,179,3.475,180,2.43,181,1.687,182,1.356,183,1.982,184,2.43,185,2.835,186,2.43,187,2.43,188,2.43,189,2.43,190,1.982,191,1.982,192,1.982,193,2.43,194,2.43,195,2.43,196,1.982,197,2.43,198,2.43,199,2.43]],["title/injectables/AuthenticationService.html",[124,0.861,200,2.006]],["body/injectables/AuthenticationService.html",[3,0.508,4,0.367,5,0.435,9,0.508,10,1.578,13,0.044,14,0.992,16,1.206,17,1.571,18,0.766,19,0.758,21,0.508,22,0.183,23,1.206,26,0.032,27,0.032,65,2.501,66,1.351,81,1.768,82,1.768,83,0.875,84,1.768,100,1.944,114,2.214,116,1.944,117,2.627,123,1.986,124,1.257,129,1.517,170,1.711,191,2.627,192,2.627,196,2.627,200,2.927,201,2.627,202,4.215,203,3.22,204,4.215,205,3.22,206,4.215]],["title/classes/CreateUserDTO.html",[22,0.164,207,1.535]],["body/classes/CreateUserDTO.html",[3,0.458,4,0.331,5,0.392,9,0.458,12,2.355,13,0.043,14,1.176,17,1.792,18,0.527,21,0.458,22,0.224,26,0.03,27,0.03,83,1.037,101,2.384,176,1.871,178,1.871,207,2.09,208,1.752,209,2.367,210,1.853,211,3.098,212,3.098,213,3.098,214,2.731,215,3.639,216,2.902,217,3.639,218,2.902,219,4.299,220,2.902,221,2.902,222,2.902,223,2.015]],["title/classes/LoginDto.html",[22,0.164,224,2.006]],["body/classes/LoginDto.html",[3,0.608,4,0.439,5,0.521,9,0.608,13,0.042,14,1.112,17,1.78,21,0.608,22,0.219,26,0.036,27,0.036,83,0.98,176,2.143,178,2.143,208,2.328,210,2.226,224,3.281,225,3.145,226,3.855,227,3.855]],["title/classes/UpdateUserDTO.html",[22,0.164,228,1.535]],["body/classes/UpdateUserDTO.html",[3,0.432,4,0.312,5,0.37,9,0.432,12,2.385,13,0.043,14,1.191,17,1.767,18,0.497,21,0.432,22,0.215,26,0.029,27,0.029,83,1.051,101,2.395,176,1.816,178,1.816,208,1.653,210,1.78,211,3.005,212,3.005,213,3.005,214,2.624,215,3.53,217,3.53,219,4.233,223,1.901,228,2.008,229,2.233,230,2.3,231,2.737,232,2.737,233,2.737,234,2.008,235,4.328,236,2.737,237,2.737,238,2.737]],["title/entities/User.html",[182,0.965,239,2.006]],["body/entities/User.html",[3,0.456,4,0.329,5,0.391,9,0.456,12,2.425,13,0.044,14,1.211,17,1.791,18,0.526,21,0.456,22,0.164,26,0.03,27,0.03,83,1.068,143,2.724,176,1.868,178,1.868,182,1.311,210,1.848,211,3.092,212,3.092,213,3.092,214,2.724,230,2.366,234,2.085,239,2.724,240,2.008,241,2.359,242,5.43,243,2.891,244,3.923,245,2.891,246,2.891,247,4.453,248,2.891,249,2.891,250,2.891,251,2.008]],["title/controllers/UserController.html",[0,1.212,50,1.535]],["body/controllers/UserController.html",[0,0.731,2,0.731,3,0.275,4,0.199,5,0.236,7,1.211,9,0.275,10,1.015,11,3.063,12,2.029,13,0.044,14,1.013,16,1.612,17,1.112,18,0.783,19,0.41,21,0.275,22,0.099,23,1.683,26,0.021,27,0.021,44,1.406,50,1.441,81,1.706,82,1.706,83,0.844,84,1.706,91,2.715,92,2.212,95,1.422,96,1.211,100,1.053,101,0.731,111,1.053,114,2.54,123,2.41,129,0.821,141,2.389,178,1.138,181,1.211,182,0.906,183,1.422,190,2.212,207,2.288,228,2.288,230,1.995,234,2.288,252,1.422,253,2.212,254,2.712,255,2.712,256,2.712,257,2.712,258,1.744,259,1.744,260,1.744,261,1.744,262,1.744,263,2.712,264,1.744,265,1.744,266,1.744,267,1.744,268,1.744,269,1.744,270,1.744,271,1.744,272,1.744,273,1.744,274,2.712,275,1.744,276,1.744,277,1.422,278,1.422,279,1.422,280,1.744,281,1.744,282,3.755,283,1.744,284,3.328,285,1.744,286,1.744,287,1.744,288,1.744,289,1.744,290,1.744,291,1.744,292,1.744,293,2.712,294,1.744,295,1.744,296,1.744,297,1.744,298,1.744,299,1.744,300,1.744,301,1.744,302,2.212,303,1.744,304,1.744,305,1.744,306,1.744,307,1.744,308,1.744,309,1.744,310,1.744,311,1.744,312,1.744]],["title/modules/UserModule.html",[28,1.212,41,1.361]],["body/modules/UserModule.html",[2,1.626,3,0.448,4,0.324,5,0.384,13,0.044,18,0.953,19,0.669,21,0.448,22,0.162,26,0.029,27,0.029,28,1.851,30,1.339,31,1.339,32,1.716,33,1.716,34,1.339,35,2.664,36,2.664,41,2.578,43,2.098,44,2.084,45,2.341,46,1.716,47,1.716,50,2.345,51,1.973,55,1.973,56,1.973,65,1.827,66,1.192,182,1.296,277,2.318,313,2.318,314,2.841,315,2.318,316,2.841,317,2.318,318,2.841,319,2.318,320,2.841]],["title/injectables/UserRepository.html",[43,1.081,124,0.861]],["body/injectables/UserRepository.html",[3,0.296,4,0.214,5,0.254,9,0.296,10,1.076,13,0.045,14,0.99,16,1.576,18,0.634,19,0.442,21,0.296,22,0.107,23,1.828,26,0.022,27,0.022,43,1.076,81,1.639,82,1.639,83,0.811,84,1.639,114,2.5,123,2.347,124,0.857,129,1.643,134,2.106,135,1.854,140,2.923,141,2.531,147,2.923,148,3.459,170,0.999,182,1.717,230,2.237,234,2.594,251,1.305,321,1.533,322,2.873,323,2.846,324,2.344,325,3.187,326,2.344,327,2.873,328,2.344,329,2.873,330,1.879,331,1.879,332,2.344,333,1.879,334,2.873,335,1.879,336,2.873,337,3.488,338,3.488,339,1.879,340,1.879,341,1.879,342,1.879,343,2.846,344,2.846,345,1.533,346,1.879,347,1.879,348,2.344,349,2.873,350,1.879,351,1.879]],["title/injectables/UserService.html",[44,1.081,124,0.861]],["body/injectables/UserService.html",[3,0.212,4,0.153,5,0.182,9,0.212,10,0.825,13,0.045,14,1.03,16,1.583,17,1.464,18,0.649,19,0.316,21,0.212,22,0.076,23,1.728,26,0.017,27,0.017,43,1.436,44,0.825,81,1.774,82,1.774,83,0.878,84,1.774,101,0.564,114,2.505,116,1.33,123,2.353,124,0.657,125,0.933,129,1.992,134,2.446,135,2.247,140,2.248,141,2.548,147,2.248,148,2.937,170,0.714,176,1.358,178,1.7,182,1.719,185,1.096,207,1.898,228,2.039,230,2.153,234,2.039,278,1.096,279,1.096,302,1.797,317,1.096,319,1.096,324,1.797,325,2.64,326,1.797,328,1.797,332,1.797,343,1.797,344,2.914,345,3.13,348,1.096,352,1.096,353,2.203,354,2.203,355,2.203,356,1.344,357,1.344,358,2.203,359,1.344,360,2.203,361,1.344,362,1.344,363,2.203,364,1.344,365,1.344,366,2.203,367,1.344,368,2.203,369,2.203,370,1.344,371,2.203,372,1.344,373,1.344,374,2.799,375,1.344,376,1.344,377,1.344,378,1.344,379,1.344,380,1.344,381,1.344,382,1.344,383,1.344,384,1.344,385,1.344,386,1.344,387,1.344,388,1.344,389,1.344,390,1.344,391,1.344,392,1.344,393,1.344,394,1.344]],["title/coverage.html",[395,2.722]],["body/coverage.html",[0,1.882,1,1.771,5,0.396,6,2.392,13,0.044,22,0.255,26,0.03,27,0.03,34,1.382,42,1.23,43,1.098,44,1.098,49,1.558,50,1.558,52,2.036,74,2.392,83,0.609,110,2.036,111,1.771,113,2.392,124,1.432,135,1.558,159,2.036,171,2.392,182,0.98,200,2.036,201,2.392,207,1.558,209,2.392,224,2.036,225,2.392,228,1.558,229,2.392,239,2.036,241,2.392,252,2.392,321,2.392,352,2.392,395,2.036,396,2.933,397,2.933,398,2.933,399,5.69,400,2.933,401,4.803,402,2.933,403,3.961,404,3.961,405,4.803,406,2.933,407,2.392,408,3.961,409,2.392,410,2.933,411,2.392,412,2.933,413,2.933]],["title/dependencies.html",[31,1.634,414,1.976]],["body/dependencies.html",[13,0.045,19,0.77,22,0.242,26,0.032,27,0.032,31,1.541,56,2.272,66,1.372,98,2.669,127,2.669,181,2.272,223,2.272,251,2.272,415,4.735,416,3.272,417,3.272,418,3.272,419,3.272,420,3.272,421,3.272,422,3.272,423,3.272,424,3.272,425,3.272,426,3.272,427,3.272,428,3.272,429,3.272,430,3.272,431,3.272,432,3.272,433,4.259,434,2.669,435,3.272,436,3.272,437,3.272,438,3.272,439,4.259,440,3.272,441,3.272,442,3.272,443,3.272,444,3.272,445,3.272,446,3.272,447,3.272,448,3.272]],["title/miscellaneous/functions.html",[449,1.463,450,2.829]],["body/miscellaneous/functions.html",[9,0.685,13,0.039,26,0.039,27,0.039,34,2.533,409,3.544,449,2.623,450,3.544,451,4.345]],["title/index.html",[9,0.382,452,2.423,453,2.423]],["body/index.html",[4,0.339,13,0.043,26,0.03,27,0.03,323,2.427,395,2.066,454,2.975,455,2.975,456,4,457,2.975,458,2.975,459,2.975,460,2.975,461,2.975,462,2.975,463,2.427,464,4.518,465,2.975,466,2.975,467,2.975,468,4.518,469,5.304,470,2.975,471,2.975,472,2.975,473,5.191,474,2.975,475,2.975,476,4,477,2.975,478,2.975,479,2.975,480,2.975,481,4,482,4,483,2.975,484,2.975,485,2.975,486,4,487,4,488,2.975,489,2.975,490,2.975,491,2.975,492,2.975,493,2.427,494,2.975,495,2.975,496,2.975,497,2.975,498,2.975,499,2.975,500,2.975,501,2.975,502,2.975,503,2.975,504,2.427,505,2.975,506,2.975,507,2.975,508,2.975,509,2.975,510,2.975,511,2.427]],["title/modules.html",[30,1.847]],["body/modules.html",[13,0.038,26,0.038,27,0.038,29,2.517,30,1.964,40,2.215,41,1.964,493,4.31,512,5.284,513,5.284,514,5.284]],["title/overview.html",[515,3.198]],["body/overview.html",[2,1.239,13,0.043,26,0.03,27,0.03,28,1.239,29,3.383,30,1.392,31,1.392,32,1.783,33,1.783,34,1.392,35,1.783,36,1.783,37,2.41,38,2.41,39,2.41,40,2.86,41,2.597,42,2.258,43,2.015,44,2.015,45,2.403,46,1.783,47,1.783,110,2.051,139,3.247,150,2.41,151,2.41,170,1.57,208,1.783,240,2.051,313,2.41,315,2.41,515,2.41,516,4.502,517,2.954]],["title/properties.html",[210,1.634,414,1.976]],["body/properties.html",[13,0.043,26,0.038,27,0.038,210,2.015,434,3.489,463,3.489,504,3.489,511,3.489,518,4.277,519,4.277]],["title/miscellaneous/variables.html",[449,1.463,520,2.829]],["body/miscellaneous/variables.html",[4,0.396,9,0.549,13,0.043,26,0.034,27,0.034,52,3.077,55,2.416,83,1.012,143,2.416,159,3.077,162,3.615,176,1.46,182,1.163,240,2.416,253,2.838,407,2.838,411,2.838,449,2.101,520,2.838,521,3.479,522,3.479,523,4.431,524,4.876,525,3.479,526,3.479,527,3.479,528,3.479,529,3.479,530,3.479,531,3.479,532,3.479,533,3.479,534,3.479,535,3.479,536,3.479,537,3.479,538,3.479,539,3.479,540,3.479,541,3.479,542,3.479]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":434,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.14.1",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{},"overview.html":{}}}],["1.0.1",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":516,"title":{},"body":{"overview.html":{}}}],["3.2.1",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["3.9.3",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["3306",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":517,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["6.9.13",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.8.1",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["9.0.8",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["_auth",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{}}}],["access_token",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["agrega",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["allow",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["amazing",{"_index":494,"title":{},"body":{"index.html":{}}}],["api",{"_index":24,"title":{},"body":{"controllers/ApiController.html":{}}}],["api.controller",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["api/v1",{"_index":8,"title":{},"body":{"controllers/ApiController.html":{}}}],["apicontroller",{"_index":1,"title":{"controllers/ApiController.html":{}},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["app",{"_index":471,"title":{},"body":{"index.html":{}}}],["app/auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["app/auth/controller/auth.controller",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["app/auth/service/auth.service",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app/user/controller/user.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["app/user/model/repository/user.repository",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app/user/service/user.service",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["app/user/user.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":462,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["aqu",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["asegúrate",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["assuming",{"_index":301,"title":{},"body":{"controllers/UserController.html":{}}}],["async",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["auth/controller/auth.controller",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/service/auth.service",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":49,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":284,"title":{},"body":{"controllers/UserController.html":{}}}],["authentication/authorization",{"_index":304,"title":{},"body":{"controllers/UserController.html":{}}}],["authenticationservice",{"_index":200,"title":{"injectables/AuthenticationService.html":{}},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["authguard",{"_index":111,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authheader",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authheader.split",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authheader.startswith('bearer",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":504,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":42,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":495,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["birthday",{"_index":211,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{}}}],["body",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":514,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":512,"title":{},"body":{"modules.html":{}}}],["building",{"_index":457,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["class",{"_index":22,"title":{"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{}},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":208,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_usermodule",{"_index":313,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":315,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":314,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":242,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":244,"title":{},"body":{"entities/User.html":{}}}],["como",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["complex",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/database.config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error(error",{"_index":347,"title":{},"body":{"injectables/UserRepository.html":{}}}],["const",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{}}}],["constructor(private",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{}}}],["constructor(userrepository",{"_index":356,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('api/v1",{"_index":20,"title":{},"body":{"controllers/ApiController.html":{}}}],["controller('authcontroller",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":281,"title":{},"body":{"controllers/UserController.html":{}}}],["controller/user.controller",{"_index":318,"title":{},"body":{"modules/UserModule.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":395,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":253,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":291,"title":{},"body":{"controllers/UserController.html":{}}}],["create(createuserdto",{"_index":258,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser",{"_index":324,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":329,"title":{},"body":{"injectables/UserRepository.html":{}}}],["createuserdto",{"_index":207,"title":{"classes/CreateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.birthday",{"_index":383,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.email",{"_index":381,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.firstname",{"_index":377,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.lastname",{"_index":379,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":385,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["database",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":214,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{}}}],["de",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":275,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(':id",{"_index":297,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(':id')@useguards(authguard",{"_index":269,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(id",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["deletion",{"_index":298,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencia",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":463,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":472,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["dto/createuserdto",{"_index":279,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/updateuserdto",{"_index":278,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e.g",{"_index":309,"title":{},"body":{"controllers/UserController.html":{}}}],["e2e",{"_index":483,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":458,"title":{},"body":{"index.html":{}}}],["email",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["encontrado",{"_index":345,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["endpoint",{"_index":25,"title":{},"body":{"controllers/ApiController.html":{}}}],["entities",{"_index":240,"title":{},"body":{"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":239,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entity/user.entity",{"_index":340,"title":{},"body":{"injectables/UserRepository.html":{}}}],["error",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["error('usuario",{"_index":344,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["example",{"_index":468,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{}}}],["existe",{"_index":349,"title":{},"body":{"injectables/UserRepository.html":{}}}],["expiresin",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["expressrequest",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["extends",{"_index":322,"title":{},"body":{"injectables/UserRepository.html":{}}}],["extract",{"_index":308,"title":{},"body":{"controllers/UserController.html":{}}}],["extractcredentialsfromrequest",{"_index":311,"title":{},"body":{"controllers/UserController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":11,"title":{},"body":{"controllers/ApiController.html":{},"controllers/UserController.html":{}}}],["findallusers",{"_index":325,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["findbyemail",{"_index":254,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyemail(@param('email",{"_index":289,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyemail(email",{"_index":262,"title":{},"body":{"controllers/UserController.html":{}}}],["findone",{"_index":255,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(@param('id",{"_index":287,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(id",{"_index":265,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(email",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyid",{"_index":326,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["finduserbyid(id",{"_index":332,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["finduserbyidandemail",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyidandemail(userdata",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["firstname",{"_index":212,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{}}}],["framework",{"_index":456,"title":{},"body":{"index.html":{}}}],["function",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":450,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generatetoken(userid",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["get(':id",{"_index":286,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':id')@useguards(authguard",{"_index":266,"title":{},"body":{"controllers/UserController.html":{}}}],["get('email/:email",{"_index":263,"title":{},"body":{"controllers/UserController.html":{}}}],["get('profile",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@useguards(authguard",{"_index":260,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":452,"title":{"index.html":{}},"body":{}}],["grow",{"_index":490,"title":{},"body":{"index.html":{}}}],["guard",{"_index":110,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handles",{"_index":303,"title":{},"body":{"controllers/UserController.html":{}}}],["headers",{"_index":310,"title":{},"body":{"controllers/UserController.html":{}}}],["here",{"_index":501,"title":{},"body":{"index.html":{}}}],["host",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('login",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":508,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":230,"title":{},"body":{"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":306,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{}}}],["import",{"_index":18,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["importa",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["incluir",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":124,"title":{"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":467,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":470,"title":{},"body":{"index.html":{}}}],["instead",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inválidas",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["isdate",{"_index":215,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isemail",{"_index":217,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isnumber",{"_index":235,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["isstring",{"_index":219,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["join",{"_index":497,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["jwt_secret",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconstants",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"modules/UserModule.html":{}}}],["kamil",{"_index":505,"title":{},"body":{"index.html":{}}}],["keep",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":213,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":511,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":487,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":307,"title":{},"body":{"controllers/UserController.html":{}}}],["logindto",{"_index":224,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["mailer",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":449,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":486,"title":{},"body":{"index.html":{}}}],["mode",{"_index":476,"title":{},"body":{"index.html":{}}}],["model/entity/user.entity",{"_index":319,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["model/repository/user.repository",{"_index":317,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":500,"title":{},"body":{"index.html":{}}}],["ms1",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":506,"title":{},"body":{"index.html":{}}}],["name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":464,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":510,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["new",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":375,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.birthday",{"_index":382,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.email",{"_index":380,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.firstname",{"_index":376,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.lastname",{"_index":378,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.password",{"_index":384,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":455,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":469,"title":{},"body":{"index.html":{}}}],["null",{"_index":343,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["number",{"_index":234,"title":{},"body":{"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["object",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["open",{"_index":488,"title":{},"body":{"index.html":{}}}],["optional",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outside",{"_index":541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":515,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":414,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":276,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["partial",{"_index":338,"title":{},"body":{"injectables/UserRepository.html":{}}}],["passport",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{}}}],["please",{"_index":498,"title":{},"body":{"index.html":{}}}],["port",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('validate",{"_index":305,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":247,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":478,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":454,"title":{},"body":{"index.html":{}}}],["project",{"_index":489,"title":{},"body":{"index.html":{}}}],["promise",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":210,"title":{"properties.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"properties.html":{}}}],["protect",{"_index":283,"title":{},"body":{"controllers/UserController.html":{}}}],["provide",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":274,"title":{},"body":{"controllers/UserController.html":{}}}],["put('')@useguards(authguard",{"_index":272,"title":{},"body":{"controllers/UserController.html":{}}}],["read",{"_index":499,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["registra",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["remove",{"_index":256,"title":{},"body":{"controllers/UserController.html":{}}}],["remove(@param('id",{"_index":299,"title":{},"body":{"controllers/UserController.html":{}}}],["remove(id",{"_index":268,"title":{},"body":{"controllers/UserController.html":{}}}],["removeuser",{"_index":327,"title":{},"body":{"injectables/UserRepository.html":{}}}],["removeuser(id",{"_index":334,"title":{},"body":{"injectables/UserRepository.html":{}}}],["repository",{"_index":323,"title":{},"body":{"injectables/UserRepository.html":{},"index.html":{}}}],["req",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/UserController.html":{}}}],["request.headers.authorization",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["require",{"_index":293,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":23,"title":{},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/ApiController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["root",{"_index":531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":473,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["safe",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":459,"title":{},"body":{"index.html":{}}}],["secret",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":460,"title":{},"body":{"index.html":{}}}],["service/auth.service",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["service/user.service",{"_index":277,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["side",{"_index":461,"title":{},"body":{"index.html":{}}}],["signin",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(email",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto.password",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/ApiController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sponsors",{"_index":492,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.config.ts",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":451,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/api.controller.ts",{"_index":6,"title":{},"body":{"controllers/ApiController.html":{},"coverage.html":{}}}],["src/api.controller.ts:6",{"_index":15,"title":{},"body":{"controllers/ApiController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/auth/auth.module.ts",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/app/auth/controller/auth.controller.ts",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/app/auth/controller/auth.controller.ts:20",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/app/auth/controller/auth.controller.ts:25",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/app/auth/dto/login.dto.ts",{"_index":225,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/app/auth/dto/login.dto.ts:2",{"_index":226,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/app/auth/dto/login.dto.ts:3",{"_index":227,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/app/auth/guard/auth.guard",{"_index":280,"title":{},"body":{"controllers/UserController.html":{}}}],["src/app/auth/guard/auth.guard.ts",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/auth/guard/auth.guard.ts:6",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/auth/guard/auth.guard.ts:9",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/auth/service/auth.service.ts",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/auth/service/auth.service.ts:13",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/auth/service/auth.service.ts:25",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/auth/service/auth.service.ts:7",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/user/controller/user.controller.ts",{"_index":252,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/app/user/controller/user.controller.ts:23",{"_index":261,"title":{},"body":{"controllers/UserController.html":{}}}],["src/app/user/controller/user.controller.ts:29",{"_index":267,"title":{},"body":{"controllers/UserController.html":{}}}],["src/app/user/controller/user.controller.ts:34",{"_index":264,"title":{},"body":{"controllers/UserController.html":{}}}],["src/app/user/controller/user.controller.ts:39",{"_index":259,"title":{},"body":{"controllers/UserController.html":{}}}],["src/app/user/controller/user.controller.ts:45",{"_index":273,"title":{},"body":{"controllers/UserController.html":{}}}],["src/app/user/controller/user.controller.ts:52",{"_index":270,"title":{},"body":{"controllers/UserController.html":{}}}],["src/app/user/dto/createuserdto.ts",{"_index":209,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/app/user/dto/createuserdto.ts:10",{"_index":221,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/app/user/dto/createuserdto.ts:13",{"_index":218,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/app/user/dto/createuserdto.ts:16",{"_index":216,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/app/user/dto/createuserdto.ts:19",{"_index":222,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/app/user/dto/createuserdto.ts:7",{"_index":220,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/app/user/dto/updateuserdto.ts",{"_index":229,"title":{},"body":{"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["src/app/user/dto/updateuserdto.ts:11",{"_index":233,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/app/user/dto/updateuserdto.ts:14",{"_index":237,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/app/user/dto/updateuserdto.ts:17",{"_index":232,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/app/user/dto/updateuserdto.ts:20",{"_index":231,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/app/user/dto/updateuserdto.ts:23",{"_index":238,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/app/user/dto/updateuserdto.ts:8",{"_index":236,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/app/user/model/entity/user.entity",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["src/app/user/model/entity/user.entity.ts",{"_index":241,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/app/user/model/entity/user.entity.ts:12",{"_index":249,"title":{},"body":{"entities/User.html":{}}}],["src/app/user/model/entity/user.entity.ts:15",{"_index":245,"title":{},"body":{"entities/User.html":{}}}],["src/app/user/model/entity/user.entity.ts:18",{"_index":243,"title":{},"body":{"entities/User.html":{}}}],["src/app/user/model/entity/user.entity.ts:21",{"_index":250,"title":{},"body":{"entities/User.html":{}}}],["src/app/user/model/entity/user.entity.ts:6",{"_index":248,"title":{},"body":{"entities/User.html":{}}}],["src/app/user/model/entity/user.entity.ts:9",{"_index":246,"title":{},"body":{"entities/User.html":{}}}],["src/app/user/model/repository/user.repository.ts",{"_index":321,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/app/user/model/repository/user.repository.ts:15",{"_index":333,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/app/user/model/repository/user.repository.ts:29",{"_index":330,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/app/user/model/repository/user.repository.ts:38",{"_index":339,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/app/user/model/repository/user.repository.ts:50",{"_index":335,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/app/user/model/repository/user.repository.ts:7",{"_index":331,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/app/user/service/user.service",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/user/service/user.service.ts",{"_index":352,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/user/service/user.service.ts:14",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:22",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:36",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:50",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:66",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:77",{"_index":370,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:85",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:9",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/service/user.service.ts:93",{"_index":372,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user/user.module.ts",{"_index":316,"title":{},"body":{"modules/UserModule.html":{}}}],["src/config/database.config.ts",{"_index":407,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config.ts",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts:10",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/config/jwt.config.ts:7",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/main.ts",{"_index":409,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/constants.ts",{"_index":411,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":474,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":477,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":479,"title":{},"body":{"index.html":{}}}],["started",{"_index":453,"title":{"index.html":{}},"body":{}}],["starter",{"_index":466,"title":{},"body":{"index.html":{}}}],["statements",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":502,"title":{},"body":{"index.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{}}}],["support",{"_index":493,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":513,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":482,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":485,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":484,"title":{},"body":{"index.html":{}}}],["tests",{"_index":481,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":491,"title":{},"body":{"index.html":{}}}],["this._auth.signin(signindto.username",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.create(user",{"_index":346,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.find",{"_index":341,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.findby",{"_index":342,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.finduserbyemail(email",{"_index":390,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduserbyid(id",{"_index":348,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["this.finduserbyid(updateuserdto.id",{"_index":387,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.decode(jwt",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.remove(user",{"_index":351,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.save(updateduser",{"_index":350,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.userrepository.find",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.remove(user",{"_index":389,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":386,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":292,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":300,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findallusers",{"_index":285,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserbyemail(email",{"_index":290,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserbyid(id",{"_index":288,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserbyidandemail(decoded.sub",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser(updateuserdto",{"_index":296,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.validate(credentials",{"_index":312,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.validate(email",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["token",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["touch",{"_index":503,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":509,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":251,"title":{},"body":{"entities/User.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule.forfeature([user",{"_index":320,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot(databaseconfig",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["types/uuid",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":465,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception('credenciales",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception('invalid",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["unauthorizedexception('unauthorized",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unauthorizedexception('usuario",{"_index":391,"title":{},"body":{"injectables/UserService.html":{}}}],["unit",{"_index":480,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":519,"title":{},"body":{"properties.html":{}}}],["update",{"_index":257,"title":{},"body":{"controllers/UserController.html":{}}}],["update(@body",{"_index":295,"title":{},"body":{"controllers/UserController.html":{}}}],["update(updateuserdto",{"_index":271,"title":{},"body":{"controllers/UserController.html":{}}}],["updateduser",{"_index":337,"title":{},"body":{"injectables/UserRepository.html":{}}}],["updateuser",{"_index":328,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["updateuser(id",{"_index":336,"title":{},"body":{"injectables/UserRepository.html":{}}}],["updateuser(updateuserdto",{"_index":369,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":228,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updating",{"_index":294,"title":{},"body":{"controllers/UserController.html":{}}}],["use",{"_index":536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":282,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":182,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["user/user.module",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["usercontroller",{"_index":50,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usermodule",{"_index":41,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":43,"title":{"injectables/UserRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice",{"_index":44,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["utils/constants",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["uuid",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["valid",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validate",{"_index":302,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["validate(email",{"_index":371,"title":{},"body":{"injectables/UserService.html":{}}}],["validatejwt",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatejwt(jwt",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":223,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":520,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":518,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":475,"title":{},"body":{"index.html":{}}}],["website",{"_index":507,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":496,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/ApiController.html":{"url":"controllers/ApiController.html","title":"controller - ApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/api.controller.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller('api/v1')\nexport class ApiController {\n  @Get()\n  findAll(): string {\n    return 'This is the API endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nAppModule -->\n\nUserRepository->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ApiController\n                        \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseConfig } from './config/database.config';\nimport { ApiController } from './api.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './app/user/model/repository/user.repository'; // Importa UserRepository\n\nimport { AuthModule } from './app/auth/auth.module';\nimport { AuthController } from './app/auth/controller/auth.controller';\n\nimport { UserModule } from './app/user/user.module';\nimport { UserController } from './app/user/controller/user.controller';\n\nimport { AuthService } from './app/auth/service/auth.service';\nimport { UserService } from './app/user/service/user.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(databaseConfig),\n    TypeOrmModule.forFeature([UserRepository]), // Registra UserRepository aquí\n    AuthModule,\n    UserModule,\n  ],\n  controllers: [ApiController, AuthController, UserController],\n  providers: [AuthService, UserService, UserRepository, JwtService], // Asegúrate de incluir UserRepository aquí\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/auth/controller/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                AuthController\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: ExpressRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/app/auth/controller/auth.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        ExpressRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/app/auth/controller/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpStatus,\n  HttpCode,\n  UseGuards,\n  Get,\n  Request,\n} from '@nestjs/common';\nimport { AuthService } from '../service/auth.service';\nimport { Request as ExpressRequest } from 'express';\n\n@Controller('AuthController')\nexport class AuthController {\n  constructor(private readonly _auth: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: Record) {\n    return this._auth.signIn(signInDto.username, signInDto.password);\n  }\n\n  @Get('profile')\n  getProfile(@Request() req: ExpressRequest) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/auth/guard/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/guard/auth.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/auth/guard/auth.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private readonly jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Unauthorized');\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    try {\n      await this.jwtService.verifyAsync(token);\n      return true; // Valid token, allow access\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from '../auth/service/auth.service';\nimport { UserModule } from '../user/user.module';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { AuthController } from '../auth/controller/auth.controller';\nimport { jwtConstants } from '../../utils/constants';\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [\n    AuthService,\n    JwtService,\n    {\n      provide: 'JWT_SECRET',\n      useValue: jwtConstants.secret,\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                validateJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/service/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/auth/service/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateJwt(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/auth/service/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/app/user/model/entity/user.entity';\nimport { UserService } from 'src/app/user/service/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService, // Agrega UserRepository como dependencia\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async signIn(email: string, password: string): Promise {\n    const user = await this.userService.validate(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const payload = { sub: user.id, email: user.email };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n\n  async validateJwt(jwt: string): Promise {\n    const decoded = this.jwtService.decode(jwt);\n    return await this.userService.findUserByIdAndEmail(decoded.sub);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/jwt.config.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/config/jwt.config.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/config/jwt.config.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(private jwtService: JwtService) {}\n\n  async generateToken(userId: string): Promise {\n    const payload = { sub: userId };\n    return this.jwtService.signAsync(payload);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/user/dto/CreateUserDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                birthday\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    Readonly\n                                lastName\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/CreateUserDTO.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/CreateUserDTO.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/CreateUserDTO.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/CreateUserDTO.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/CreateUserDTO.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEmail, IsString } from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsString()\n  readonly firstName: string;\n\n  @IsString()\n  readonly lastName: string;\n\n  @IsEmail()\n  readonly email: string;\n\n  @IsDate()\n  readonly birthday: Date;\n\n  @IsString()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/user/dto/UpdateUserDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                birthday\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    Readonly\n                                lastName\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/UpdateUserDTO.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/UpdateUserDTO.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/UpdateUserDTO.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/UpdateUserDTO.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/UpdateUserDTO.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/dto/UpdateUserDTO.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEmail, IsNumber, IsString } from 'class-validator';\n\nexport class UpdateUserDTO {\n\n  @IsNumber()\n  readonly id: number;\n\n  @IsString()\n  readonly firstName: string;\n\n  @IsString()\n  readonly lastName: string;\n\n  @IsEmail()\n  readonly email: string;\n\n  @IsDate()\n  readonly birthday: Date;\n\n  @IsString()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/user/model/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                birthday\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/model/entity/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/model/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/model/entity/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/model/entity/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/model/entity/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/user/model/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({unique : true})\n  email: string;\n\n  @Column()\n  birthday: Date;\n\n  @Column()\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/user/controller/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByEmail\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/app/user/controller/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/app/user/controller/user.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/app/user/controller/user.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/app/user/controller/user.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/app/user/controller/user.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateUserDto: UpdateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/app/user/controller/user.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  UseGuards,\n} from '@nestjs/common';\nimport { User } from 'src/app/user/model/entity/user.entity';\nimport { UserService } from '../service/user.service';\nimport { UpdateUserDTO } from '../dto/UpdateUserDTO';\nimport { CreateUserDTO } from '../dto/CreateUserDTO';\nimport { AuthGuard } from 'src/app/auth/guard/auth.guard';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get()\n  @UseGuards(AuthGuard) // Protect with JWT authentication\n  async findAll(): Promise {\n    return await this.userService.findAllUsers();\n  }\n\n  @Get(':id')\n  @UseGuards(AuthGuard)\n  async findOne(@Param('id') id: number): Promise {\n    return await this.userService.findUserById(id);\n  }\n\n  @Get('email/:email')\n  async findByEmail(@Param('email') email: string): Promise {\n    return await this.userService.findUserByEmail(email);\n  }\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDTO): Promise {\n    return await this.userService.createUser(createUserDto);\n  }\n\n  @Put('')\n  @UseGuards(AuthGuard) // Require authentication for updating\n  async update(@Body() updateUserDto: UpdateUserDTO\n  ): Promise {\n    return await this.userService.updateUser(updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(AuthGuard) // Require authentication for deletion\n  async remove(@Param('id') id: number): Promise {\n    return await this.userService.deleteUser(id);\n  }\n\n\n  // Assuming \"validate()\" in UserService handles authentication/authorization\n  // @Post('validate')\n  // async validate(): Promise {\n  //   // Implement logic to extract credentials from request (e.g., headers, body)\n  //   const credentials = extractCredentialsFromRequest();\n  //   return await this.userService.validate(credentials);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserRepository \n\nUserRepository \n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserRepository } from './model/repository/user.repository';\nimport { UserController } from './controller/user.controller';\nimport { UserService } from './service/user.service';\nimport { User } from './model/entity/user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtService } from '@nestjs/jwt';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, UserRepository])],\n  controllers: [UserController],\n  providers: [JwtService, UserService, UserRepository, User],\n  exports: [UserService, UserRepository],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/user/model/repository/user.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Repository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/model/repository/user.repository.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/model/repository/user.repository.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/model/repository/user.repository.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/model/repository/user.repository.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: number, updatedUser: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/model/repository/user.repository.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedUser\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { Repository } from 'typeorm';\nimport { User } from '../entity/user.entity';\n@Injectable()\nexport class UserRepository extends Repository {\n  async findAllUsers(): Promise {\n    try {\n      return await this.find();\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async findUserById(id: number): Promise {\n    try {\n      const user = await this.findBy({\n        id: id,\n      });\n      if (user !== null) {\n        throw new Error('Usuario no encontrado');\n      }\n      return await user;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async createUser(user: User): Promise {\n    try {\n      return await this.create(user);\n    } catch (error) {\n      console.error(error);\n      return error;\n    }\n  }\n\n  async updateUser(id: number, updatedUser: Partial): Promise {\n    try {\n      const user = await this.findUserById(id);\n      if (user == null) {\n        throw new Error('Usuario no existe!!');\n      }\n      return await this.save(updatedUser);\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async removeUser(id: number): Promise {\n    try {\n      const user = await this.findUserById(id);\n      if (user == null) {\n        throw new Error('Usuario no existe!!');\n      }\n      await this.remove(user);\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/user/service/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                findUserByIdAndEmail\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/app/user/service/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByIdAndEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByIdAndEmail(userData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(updateUserDto: UpdateUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user/service/user.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserRepository } from '../model/repository/user.repository';\nimport { User } from '../model/entity/user.entity';\nimport { CreateUserDTO } from '../dto/CreateUserDTO';\nimport { UpdateUserDTO } from '../dto/UpdateUserDTO';\n\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private readonly userRepository: UserRepository\n  ) {}\n\n  async findAllUsers(): Promise {\n    try {\n      return await this.userRepository.find();\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async findUserById(id: number): Promise {\n    try {\n      const user = await this.userRepository.findOneBy({\n        id: id,\n      });\n      if (!user) {\n        throw new Error('Usuario no encontrado');\n      }\n      return await user;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async findUserByEmail(email: string): Promise {\n    try {\n      const user = await this.userRepository.findOneBy({\n        email: email,\n      });\n      if (user == null) {\n        throw new Error('Usuario no encontrado');\n      }\n      return await user;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async findUserByIdAndEmail(userData: any): Promise {\n    const { id, email } = userData;\n    try {\n      const user = await this.userRepository.findOneBy({\n        id: id,\n        email: email,\n      });\n      if (user == null) {\n        throw new Error('Usuario no encontrado');\n      }\n      return await user;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async createUser(createUserDto: CreateUserDTO): Promise {\n    const newUser = new User();\n    newUser.firstName = createUserDto.firstName;\n    newUser.lastName = createUserDto.lastName;\n    newUser.email = createUserDto.email;\n    newUser.birthday = createUserDto.birthday;\n    newUser.password = createUserDto.password;\n\n    return await this.userRepository.save(newUser);\n  }\n\n  async updateUser(updateUserDto: UpdateUserDTO): Promise {\n    const user = await this.findUserById(updateUserDto.id!);\n    if (!user) {\n      throw new Error('Usuario no encontrado');\n    }\n    return await this.userRepository.save({ ...user, ...updateUserDto });\n  }\n\n  async deleteUser(id: number): Promise {\n    const user = await this.findUserById(id);\n    if (!user) {\n      throw new Error('Usuario no encontrado');\n    }\n    await this.userRepository.remove(user);\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.findUserByEmail(email);\n\n    if (!user) {\n      throw new UnauthorizedException('Usuario no encontrado');\n    }\n\n    if (user.password !== password) {\n      throw new UnauthorizedException('Credenciales inválidas');\n    }\n\n    return user;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api.controller.ts\n            \n            controller\n            ApiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/auth/controller/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/auth/guard/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/user/controller/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/user/dto/CreateUserDTO.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/user/dto/UpdateUserDTO.ts\n            \n            class\n            UpdateUserDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/user/model/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/user/model/repository/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/user/service/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/uuid : ^9.0.8\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            mysql2 : ^3.9.3\n        \n            nestjs : ^0.0.1\n        \n            nestjs-mailer : ^1.0.1\n        \n            nodemailer : ^6.9.13\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^9.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\nAppModule -->\n\nUserRepository->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModule\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: 'localhost',\n  port: 3306,\n  username: 'root',\n  password: '',\n  database: 'ms1',\n  entities: [User],\n  synchronize: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret:\n    'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
